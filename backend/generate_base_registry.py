from datetime import datetime, timezone
import os
import ast

# Constants
APP_DIR = os.path.join(os.path.dirname(__file__), "app")
IGNORE_DIRS = {"db", "configs", "services", "repo", "__pycache__"}
TARGET_FILE = os.path.join(APP_DIR, "db", "base_registry.py")
ALLOWED_BASE_CLASSES = {"SQLModel", "TimestampMixin", "IDMixin", "BaseModel"}
IGNORE_API_MODELS = "api_models.py"

def find_model_classes(file_path):
    """Parse a Python file and return all class names inheriting from ALLOWED_BASE_CLASSES."""
    with open(file_path, "r", encoding="utf-8") as file:
        node = ast.parse(file.read(), filename=file_path)

    classes = []
    for item in node.body:
        print(f"Found item: {item} - {item.__class__}")
        if isinstance(item, ast.ClassDef):
            print(item.name)
            for base in item.bases:
                if isinstance(base, ast.Name) and base.id in ALLOWED_BASE_CLASSES:
                    classes.append(item.name)
                elif isinstance(base, ast.Attribute) and base.attr in ALLOWED_BASE_CLASSES:
                    classes.append(item.name)
    return classes

def generate_import_path(file_path):
    """Convert file_path into Python import path relative to app/."""
    relative_path = os.path.relpath(file_path, APP_DIR)
    module_path = relative_path.replace(".py", "").replace(os.path.sep, ".")
    return f"app.{module_path}"

def scan_for_models():
    """DFS through app/, collect all model classes with allowed base classes."""
    model_entries = set() 

    for root, dirs, files in os.walk(APP_DIR):
        dirs[:] = [d for d in dirs if d not in IGNORE_DIRS]

        if "models" not in root.split(os.path.sep):
            continue

        for file in files:
            if file.endswith(".py") and not file.startswith("__init__") and not file.endswith(IGNORE_API_MODELS):
                file_path = os.path.join(root, file)
                classes = find_model_classes(file_path)
                if classes:
                    module_path = generate_import_path(file_path)
                    for cls in classes:
                        model_entries.add((module_path, cls))

    return model_entries

def write_base_registry(model_entries):
    """Overwrite base_registry.py cleanly with imports."""
    with open(TARGET_FILE, "w", encoding="utf-8") as f:
        f.write(f"# This file was auto-generated by generate_base_registry.py on {datetime.now(timezone.utc)}\n")
        f.write("# Do not edit manually.\n\n")
        
        for module, cls in sorted(model_entries):
            f.write(f"from {module} import {cls}\n")

    print(f"Generated {TARGET_FILE} with {len(model_entries)} models.")

def main():
    model_entries = scan_for_models()
    write_base_registry(model_entries)

if __name__ == "__main__":
    main()
